#   УСКОРЕННАЯ ОБРАБОТКА ДАННЫХ:
# ================================
# lambda,  filter,  map,  zip,  enumerate,  list comprehension
# ===============================================================

# # примеры простых привычных функцийЖ
# def f(x):
#     x**2
# print(type(f)) # класс функшн

# g=f # сщхраняем в переменную функцию. Вызов функции не делаем
# print(f(1))
# print(g(1)) # работают одинаково

# def math (op, x): # op-операция или функция  , x-переменная
#     print (op, x)

# # еще 2 функции:
# def calc1(x):
#     return x+10
# print(calc1(3))

# def calc2(x):
#     return x*10
# print(calc2(3))

# # тогда:
# math(calc2, 10) # 100
# math(calc1, 10) # 20

# # или пишем функцию с двумя переменными:
# def sum(x,y):
#     return x+y
    
# def mult(x,y):
#     return x*y

# def calc(op, a, b):  # аргументы a, b не обязательно должны совпадать с именами предыд.функций (х и у)
#     print (op(a, b))  # или return op(a,b)

# calc(mult, 4, 5) # 20, т.к.4*5

# # если мы используем переменную, ч.б.храниеть в ней функцию, например:
# f=sum
# # тогда: 
# calc(f, 4, 5) # 9, т.к. 4+5


# # lambda
# # ===================================================================
# можно еще сократить функцию:
import numbers


f = lambda q, w: q+w # это как наша функция sum

# или:
sum = lambda x, y: x + y 
calc = (sum, 4,5)

# или еще сщкращаем:
calc(lambda x, y: x + y, 4, 5)


# # list comprehansion  -  генерация списков
# # ==================================================================


# простой цикл:
list = []
for i in range(1, 11):
    if (i%2 == 0):
        list.append(i)
print(list)

# упростим:
list = [i for i in range(1, 11)]
print(list)

# с условием (четность элементов):
list = [i for i in range(1, 11) if i%2 ==0] # [2,4,6,8,10]
print(list)

# можно получить список кортежей:
list = [(i, i) for i in range(1, 11) if i%2 ==0] # [(2,2), (4,4), (6,6),... (10,10)]
print(list)

# можно добавить обработку данных типа обычной функции типа:
def f(x):
    return x**3

#  и добавляем классическую функцию:
list = [f(i) for i in range(1, 11) if i%2 ==0] # [8, 64, 216, 512, 1000]
print(list)

#  или делаем кортежи с функцией в спискеЖ
list = [i, f(i) for i in range(1, 11) if i%2 ==0] # [(2,8), (4,64), ... (10,1000)]
print(list)


# ЗАДАЧА:
# ==========================================
# в файле хранятся числа. надо выбрать четные и составить список пар (число, квадрат числа)
# 1 2 3 5 8 15 23 38 -> [(2, 4), (8, 64), 938, 1444]

# 1й вариант:
path = 'C:\Users\Geniy\Desktop\в ноут\D_ОБУЧЕНИЕ_GEEK_BRAINS\1_УЧЕБНЫЕ_МАТЕРИАЛЫ\007_Знакомство_с_языком_Python\Python_лекции_семинары_дом_задания\Python_tasks'
f = open(path, 'r') # связзываем файловую переменную с нашим файлом на диске
data = f.read() + ' ' # искусственный прием: считываю всё, что есть и добавляю пробел
f.close()

numbers[] #создаем пустой список. который будем наполнять
while data != ' ':   #проходим по строке и проверяем "пока моя строка не пустая"
    space_pos = data.index(' ')   # найти первую позицию пробела
    numbers.append(int(data[:space_pos]))   #взять все, что находится от 1го символа до позиции 1го пробела, превратить в число и добавить в список чисел
    data = data[space_pos + 1:]   #обновляем строку, убрав то, что уже добавили в numbers

out = []   # нов список
for e in numbers:   #проходим по исходному списку
    if not e%2:   # проверка на четность
        out.append((e, e**2))   # добавл.во 2й список кортежи, где 1я координата -число, а 2я - квадрат этого числа
print(out)   # [(2,4), (8, 64), (38, 1444)]

# 2й вариант: улучшим этот код:
def select(f, col):   # аргументы: функция и набор данных
    return [f(x) for x in col]   # будем возвращать сформированный список

def where(f, col):
    return [x for x in col if f(x)]   # фомируем список
    
data = '1 2 3 5 8 15 23 38'.split()   # для наглядности берем данные не из файла, а к готовой строке пирменяем функцию split. На выходе получим набор строк
res = select(int, data)   # int-функция, data-набор данных













